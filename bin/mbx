#!/usr/bin/env python3 
# This file is placed in the Public Domain.
#
# pylint: disable=C0115,C0116,C0209,W0212


"mailbox"


import mailbox
import os
import sys
import time


sys.path.insert(0, os.getcwd())


from obj.object import Default, Object, keys, update
from obj.disk   import Storage, sync
from obj.find   import find, fntime
from obj.method import fmt, fqn, parse


"defines"


bdmonths = [
            'Bo',
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
           ]


monthint = {
            'Jan': 1,
            'Feb': 2,
            'Mar': 3,
            'Apr': 4,
            'May': 5,
            'Jun': 6,
            'Jul': 7,
            'Aug': 8,
            'Sep': 9,
            'Oct': 10,
            'Nov': 11,
            'Dec': 12
           }


Cfg = Default()


"classes"


class CLI:

    cmds = Object()

    @staticmethod
    def add(func) -> None:
        setattr(CLI.cmds, func.__name__, func)

    @staticmethod
    def dispatch(evt) -> None:
        func = getattr(CLI.cmds, evt.cmd, None)
        if not func:
            return
        func(evt)
        evt.show()


class Event(Default):

    def __init__(self):
        Default.__init__(self)
        self.result  = []
        self.txt     = ""

    def reply(self, txt) -> None:
        self.result.append(txt)

    def show(self) -> None:
        for txt in self.result:
            print(txt.encode('utf-8', 'replace').decode())


class Email(Object):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.text = ""


"utility"


def to_date(date):
    date = date.replace("_", ":")
    res = date.split()
    ddd = ""
    try:
        if "+" in res[3]:
            raise ValueError
        if "-" in res[3]:
            raise ValueError
        int(res[3])
        ddd = "{:4}-{:#02}-{:#02} {:6}".format(
            res[3],
            monthint[res[2]],
            int(res[1]),
            res[4]
       )
    except (IndexError, KeyError, ValueError) as ex:
        try:
            if "+" in res[4]:
                raise ValueError from ex
            if "-" in res[4]:
                raise ValueError from ex
            int(res[4])
            ddd = "{:4}-{:#02}-{:02} {:6}".format(
                res[4],
                monthint[res[1]],
                int(res[2]),
                res[3]
            )
        except (IndexError, KeyError, ValueError):
            try:
                ddd = "{:4}-{:#02}-{:02} {:6}".format(
                    res[2],
                    monthint[res[1]],
                    int(res[0]),
                    res[3]
                )
            except (IndexError, KeyError):
                try:
                    ddd = "{:4}-{:#02}-{:02}".format(
                        res[2],
                        monthint[res[1]],
                        int(res[0])
                   )
                except (IndexError, KeyError):
                    try:
                        ddd = "{:4}-{:#02}".format(
                            res[2],
                            monthint[res[1]]
                        )
                    except (IndexError, KeyError):
                        try:
                            ddd = "{:4}".format(res[2])
                        except (IndexError, KeyError):
                            ddd = ""
    return ddd


"commands"


def cmd(event):
    event.reply(",".join(sorted(CLI.cmds)))


def fnd(event):
    if not event.rest:
        res = sorted([x.split('.')[-1].lower() for x in Storage.files()])
        if res:
            event.reply(",".join(res))
        else:
            event.reply("no objects in store")
        return
    otype = event.args[0]
    args = []
    if event.gets:
        args.extend(keys(event.gets))
    if event.rest:
        args.extend(event.args[1:])
    clz = Storage.long(otype)
    if "." not in clz:
        for fnm in Storage.files():
            claz = fnm.split(".")[-1]
            if otype == claz.lower():
                clz = fnm
    nmr = 0
    for fnm, obj in find(clz, event.gets):
        event.reply(f"{nmr} {fmt(obj, args, plain=True)}")
        nmr += 1
    if not nmr:
        event.reply("no result")


def mbx(event):
    if not event.args:
        return
    path = os.path.expanduser(event.args[0])
    event.reply(f"reading from {path}")
    nrs = 0
    if os.path.isdir(path):
        thing = mailbox.Maildir(path, create=False)
    elif os.path.isfile(path):
        thing = mailbox.mbox(path, create=False)
    else:
        return
    try:
        thing.lock()
    except FileNotFoundError:
        pass
    for mail in thing:
        email = Email()
        update(email, dict(mail._headers))
        email.text = ""
        for payload in mail.walk():
            if payload.get_content_type() == 'text/plain':
                email.text += payload.get_payload()
        email.text = email.text.replace("\\n", "\n")
        if "Date" in email:
            date = to_date(email.Date)
        elif "Published" in email:
            date = to_date(email.Published)
        elif "date" in email:
            date = to_date(email.date)
        sync(email, os.path.join(fqn(email), os.sep.join(date.split())))
        nrs += 1
    if nrs:
        event.reply(f"ok {nrs}")


"runtime"


if __name__ == "__main__":
    parse(Cfg, " ".join(sys.argv[1:]))
    CLI.add(cmd)
    CLI.add(fnd)
    CLI.add(mbx)
    evn = Event()
    evn.txt = Cfg.otxt
    parse(evn)
    CLI.dispatch(evn)
